[{"content":"Status: [Latest]\nI recently finished an excellent graduate course, Software Engineering (CS5704), and learned about different aspects of software projects and how different-size companies handle their technical/business changes to deliver successful products to their customer. Some important topics are Process Models (Waterfall, V-Model, Spiral, Agile), Requirements Definition, and Architecture Design Patterns. Especially, S.O.L.I.D principles have struck me as must-known concepts for writing better and cleaner code.\nWhy do S.O.L.I.D principles matter? According to Robert Martin, bad code slows down the development team as it is confusing and fragile. Confusing code does not explain what it is doing, while fragile code breaks in many places when you change one or a few lines of code.\nWhat we want is the code that is clear, rigid, and reusable.\nFun Fact: In his talk in S.O.L.I.D Principles, he mentioned that he was not the first to realize or coin the acronym \u0026ldquo;SOLID.”\nSingle Responsibility Principle SRP: \u0026ldquo;A class should have one, and only one reason to change\u0026rdquo; — Robert C. Martin. In Object Oriented Programming (OOP), a class should have only one primary function. If there is more than one utility for that class, we should split it into multiple courses. This helps distribute the functional responsibilities across numerous classes or objects (or developers).\nFig. 1. Don't let your code (or yourself) take on all the responsibilties in the project. Divide and conquer! (Image source: MonkeyUser.com). Web Development Example Let\u0026rsquo;s say you are a developer in the Google Shopping team who is in charge of designing a class to process post-item-purchase.\nCode Example class PostPurchaseProcess: def web_notification(self, message): \u0026#34;\u0026#34;\u0026#34; Code to send confirmation bill to Google Chrome \u0026#34;\u0026#34;\u0026#34; pass def email_notification(self, message): \u0026#34;\u0026#34;\u0026#34; Code to send confirmation bill to Gmail \u0026#34;\u0026#34;\u0026#34; pass def phone_notification(self, message): \u0026#34;\u0026#34;\u0026#34; Code to send confirmation bill to Google Pixel \u0026#34;\u0026#34;\u0026#34; pass In the example above, the class PostPurchaseProcess violates the SRP as it contains too many responsibilities: sending notifications to web app, email, and mobile. What if there are errors in sending notifications to Google Pixel and Gmail? It may take time to pinpoint precisely which function(s) is responsible for the mistake!\nFix: We can refactor the code into multiple classes, each with single responsibility.\nFig. 2. Design refactored with single responsibility principle. Code Example class WebPurchaseProcess: def web_notification(self, message): \u0026#34;\u0026#34;\u0026#34; Code to send confirmation bill to Google Chrome \u0026#34;\u0026#34;\u0026#34; pass class EmailPurchaseProcess: def email_notification(self, message): \u0026#34;\u0026#34;\u0026#34; Code to send confirmation bill to Gmail \u0026#34;\u0026#34;\u0026#34; pass class PhonePurchaseProcess: def phone_notification(self, message): \u0026#34;\u0026#34;\u0026#34; Code to send confirmation bill to Google Pixel \u0026#34;\u0026#34;\u0026#34; pass Data Science Example Suppose you are a Data Scientist at C3.ai who is processing a tabular dataset for a supervised classification application. There are multiple steps to investigate the structure, quality, and content of the dataset, such as: checking datatypes, removing duplicates, data imputation, removing outliers, class-balancing, feature analysis, or feature engineering. Similar to the Google Shopping example above, to follow the SRP, we will need to put these steps into their separate class.\nCode Example class DataImputation: def median_fill(self, data): \u0026#34;\u0026#34;\u0026#34; Code to fill missing data by median of feature \u0026#34;\u0026#34;\u0026#34; pass class OutlierRemoval: def remove_by_euclidean_dist(self, data): \u0026#34;\u0026#34;\u0026#34; Code to remove outliers using Euclidean distance \u0026#34;\u0026#34;\u0026#34; pass class FeatureAnalysis: def pearson_corr_cal(self, data): \u0026#34;\u0026#34;\u0026#34; Code to calculate Pearson correlation scores between input feature(s) and output label(s) \u0026#34;\u0026#34;\u0026#34; pass However, I don\u0026rsquo;t find this principle helpful in a Kaggle or data science project, as each Jupyter Notebook cell can be run and tested individually.\nOpen-Closed Principle OCP: \u0026ldquo;A module (or component) should be open for extension but closed for modification\u0026rdquo; — Bertrand Meyer. When making changes, the principle prevents the already functional design from bugs or breaks. This principle promotes a modular and flexible design that allows for the easy integration of a new idea while making your codebase more maintainable and scalable. The OCP can be hard to understand, so let\u0026rsquo;s walk through some examples.\nFig. 3. Sometime it is hard to implement new features without refactor the code. (Image source: MonkeyUser.com). Web Development Example An easy-to-see symptom of OCP violation to look for is the use of if/elif/else or switch-case statements. Let\u0026rsquo;s say that you are a (Flask or Django) backend developer at Meta who is writing a REST API that uses HTTP request protocols (POST, GET, PUT, DELETE) to allow users to interact with the database via CRUD (Create, Read, Update, Delete).\nCode Example class RequestHandler: def handle_request(self, request): \u0026#34;\u0026#34;\u0026#34; Code to handle request based on type \u0026#34;\u0026#34;\u0026#34; if request.method == \u0026#34;GET\u0026#34;: self.handle_get(request) elif request.method == \u0026#34;POST\u0026#34;: self.handle_post(request) elif request.method == \u0026#34;PUT\u0026#34;: self.handle_put(request) elif request.method == \u0026#34;DELETE\u0026#34;: self.handle_delete(request) def handle_get(self, request): \u0026#34;\u0026#34;\u0026#34; Code to handle GET request \u0026#34;\u0026#34;\u0026#34; pass def handle_post(self, request): \u0026#34;\u0026#34;\u0026#34; Code to handle POST request \u0026#34;\u0026#34;\u0026#34; pass def handle_put(self, request): \u0026#34;\u0026#34;\u0026#34; Code to handle PUT request \u0026#34;\u0026#34;\u0026#34; pass def handle_delete(self, request): \u0026#34;\u0026#34;\u0026#34; Code to handle DELETE request \u0026#34;\u0026#34;\u0026#34; pass Fix: The example above violates OCP because every time a new request type is added (e.g., PATCH), our RequestHandler class needs to be modified. This can introduce new bugs into existing code. As the OCP stated, we should design our code to be fixed but extended. A solution to OCP violation is to separate each request type into individual classes, thus abstracting the RequestHandler class. Therefore, if we want to add a PATCH request, we can extend our API by adding a new PatchRequestHander class.\nFig. 4. Design refactored with open-closed principle. Code Example class RequestHandler: def handle_request(self, request): \u0026#34;\u0026#34;\u0026#34; Code to handle request based on type \u0026#34;\u0026#34;\u0026#34; request.handle() class GetRequestHandler: def handle(self): \u0026#34;\u0026#34;\u0026#34; Code to handle GET request \u0026#34;\u0026#34;\u0026#34; pass class PostRequestHandler: def handle(self): \u0026#34;\u0026#34;\u0026#34; Code to handle POST request \u0026#34;\u0026#34;\u0026#34; pass class PutRequestHandler: def handle(self): \u0026#34;\u0026#34;\u0026#34; Code to handle PUT request \u0026#34;\u0026#34;\u0026#34; pass class DeleteRequestHandler: def handle(self): \u0026#34;\u0026#34;\u0026#34; Code to handle DELETE request \u0026#34;\u0026#34;\u0026#34; pass class PatchRequestHandler: def handle(self): \u0026#34;\u0026#34;\u0026#34; Code to handle PATCH request (extended) \u0026#34;\u0026#34;\u0026#34; pass Data Science Example Let\u0026rsquo;s say you are a Machine Learning Engineer at NVIDIA who is writing a Python script for a baseline model with data preprocessing, model training, and model evaluation. Like the REST API example above, you want your class ModelPipeline to remain closed for modification but open for extension by strictly following the OCP.\nCode Example class DataPreprocessor: def preprocess(self, dataset): \u0026#34;\u0026#34;\u0026#34; Code to preprocess data \u0026#34;\u0026#34;\u0026#34; pass class ModelTrainer: def train(self, dataset): \u0026#34;\u0026#34;\u0026#34; Code to train model \u0026#34;\u0026#34;\u0026#34; pass class ModelEvaluator: def evaluate(self, model, dataset): \u0026#34;\u0026#34;\u0026#34; Code to evaluate model \u0026#34;\u0026#34;\u0026#34; pass class ModelPipeline: def __init__(self, preprocessor, trainer, evaluator): \u0026#34;\u0026#34;\u0026#34; Code to build a ModelPipeline constructor (object) \u0026#34;\u0026#34;\u0026#34; self.preprocessor = preprocessor self.trainer = trainer self.evaluator = evaluator def run_pipeline(self, dataset): \u0026#34;\u0026#34;\u0026#34; Code to run the machine learning project end-to-end \u0026#34;\u0026#34;\u0026#34; preprocessed_data = self.preprocessor.preprocess(dataset) model = self.trainer.train(preprocessed_data) evaluation_result = self.evaluator.evaluate(model, preprocessed_data) return evaluation_result Your Data Engineer teammate develops a new way of processing the dataset. Luckily, due to your guideline of OCP, your teammate can easily extend the existing baseline model by inheriting the DataPreprocessor class without the risk of breaking your functional baseline design.\nCode Example class NewDataPreprocessor(DataPreprocessor): def preprocess(self, dataset): \u0026#34;\u0026#34;\u0026#34; Code to preprocess data with new technique \u0026#34;\u0026#34;\u0026#34; pass Liskov Substitution Principle LSP: \u0026ldquo;Subclasses should be substitutable for their base classes (without affecting the correctness of the program)\u0026rdquo; — Barbara Liskov. In OOP, what we want is for any method or code that works for a base class should continue to work correctly when used with the derived types. This principle ensures the inheritance hierarchies are consistent, extensible, and correct.\nFig. 5. Design your codebase to be more predictable for later reuse. (Image source: MonkeyUser.com). Web Development \u0026amp; Data Science Example Let\u0026rsquo;s say that you are to design a codebase to write processed data into a MySQL database and a CSV file (You can think of adding new columns into a database by scraping or engineering new features).\nCode Example class DataHandler(): def write_db(self, data): \u0026#34;\u0026#34;\u0026#34; Code to write processed data to MySQL database \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Handling MySQL database.\u0026#34;) def write_csv(self, data): \u0026#34;\u0026#34;\u0026#34; Code to write processed data to CSV file \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Handling CSV file.\u0026#34;) class WriteDB(DataHandler): def write_db(self, data): \u0026#34;\u0026#34;\u0026#34; Code to write processed data to MySQL database \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Handling MySQL database.\u0026#34;) def write_csv(self, data): \u0026#34;\u0026#34;\u0026#34; Code to write processed data to CSV file \u0026#34;\u0026#34;\u0026#34; raise Exception(\u0026#34;Error: Can\u0026#39;t write to CSV file.\u0026#34;) class WriteCSV(DataHandler): def write_db(self, data): \u0026#34;\u0026#34;\u0026#34; Code to write processed data to MySQL database \u0026#34;\u0026#34;\u0026#34; raise Exception(\u0026#34;Error: Can\u0026#39;t write to MySQL database.\u0026#34;) def write_csv(self, data): \u0026#34;\u0026#34;\u0026#34; Code to write processed data to CSV file \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Handling CSV file.\u0026#34;) Here, our base class DataHandler defined two methods, write_db() and write_csv(). The derived class WriteDB inherits from DataHander and overrides the write_csv method. However, instead of providing the expected behavior, it prints an error message indicating it can\u0026rsquo;t write to a CSV file. Similarly, the derived class WriteCSV prints out the error message indicating it can\u0026rsquo;t write to MySQL file. This design violates the LSP as the derived classes do not behave as expected based on the contract defined by the DataHandler base class. The base class is designed to be too specific, thus causing its children to handle edge case(s) based on the characteristics of the child classes.\nFixed: Let\u0026rsquo;s write a more generic base class!\nFig. 6. Design refactored with liskov substitution principle. Code Example class DataHandler(): def write(self, data): \u0026#34;\u0026#34;\u0026#34; Code to handle processed data \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Handling data.\u0026#34;) class WriteDB(DataHandler): def write(self, data): \u0026#34;\u0026#34;\u0026#34; Code to write processed data to MySQL database \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Handling MySQL database.\u0026#34;) class WriteCSV(DataHandler): def write(self, data): \u0026#34;\u0026#34;\u0026#34; Code to write processed data to CSV file \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Handling CSV file.\u0026#34;) If you have an object of type WriteDB or WriteCSV, you can safely use it wherever an object of type DataHandler is expected because they adhere to the same contract.\nInterface Segregation Principle ISP: \u0026ldquo;Many client-specific interfaces are better than one general purpose interface\u0026rdquo; — Robert C. Martin. If we have an extensive interface with many functions, the class implementing the interface might only use some defined functions! It is better to break up the interface into multiple smaller interfaces; then, we can inherit our class\u0026rsquo;s needed interface(s). This principle promotes code modularity, reduces unnecessary dependencies, and makes it easier to maintain/extend the existing codebase.\nFig. 7 . Extensive class can be hard to be refactored, inherited, or reused. (Image source: MonkeyUser.com). Web Development Example Let\u0026rsquo;s say you are a Full-stack Web Developer at Odoo who writes a simple web app with a home page and admin page.\nCode Example class WebPage: def render(self): \u0026#34;\u0026#34;\u0026#34; Code to render HTML of a generic web page \u0026#34;\u0026#34;\u0026#34; pass def save(self): \u0026#34;\u0026#34;\u0026#34; Code to save data of a generic web page into a database \u0026#34;\u0026#34;\u0026#34; pass def delete(self): \u0026#34;\u0026#34;\u0026#34; Code to delete data of a generic web page from a database \u0026#34;\u0026#34;\u0026#34; pass class HomePage(WebPage): def render(self): \u0026#34;\u0026#34;\u0026#34; Code to render HTML of home page \u0026#34;\u0026#34;\u0026#34; pass def save(self): \u0026#34;\u0026#34;\u0026#34; Code to save data of home page into a database \u0026#34;\u0026#34;\u0026#34; pass def delete(self): \u0026#34;\u0026#34;\u0026#34; Code to delete data of home page from a database \u0026#34;\u0026#34;\u0026#34; raise Exception(\u0026#34;Error: Only Admin can delete data from database.\u0026#34;) class AdminPage(WebPage) def render(self): \u0026#34;\u0026#34;\u0026#34; Code to render HTML of admin page \u0026#34;\u0026#34;\u0026#34; pass def save(self): \u0026#34;\u0026#34;\u0026#34; Code to save data of admin page into a database \u0026#34;\u0026#34;\u0026#34; pass def delete(self): \u0026#34;\u0026#34;\u0026#34; Code to delete data of admin page from a database \u0026#34;\u0026#34;\u0026#34; pass The example above violates the ISP because the children should not be forced to depend on the parent\u0026rsquo;s method(s) they do not use. While the AdminPage class inherits just fine, the HomePage class can\u0026rsquo;t use the delete() function. This creates an unnecessary dependency!\nFixed: It will be better to segregate the parent (WebPage) class into smaller interface(s) that meet the needs of each child. We can separate render(), save(), and delete() functions into multiple classes.\nFig. 8. Design refactored with interface segregation principle. Code Example class Renderable: def render(self): \u0026#34;\u0026#34;\u0026#34; Code to render HTML of a generic web page \u0026#34;\u0026#34;\u0026#34; pass class Savable: def save(self): \u0026#34;\u0026#34;\u0026#34; Code to save data of a generic web page into a database \u0026#34;\u0026#34;\u0026#34; pass class Deletable: def delete(self): \u0026#34;\u0026#34;\u0026#34; Code to delete data of a generic web page from a database \u0026#34;\u0026#34;\u0026#34; pass class HomePage(Renderable, Savable): def render(self): \u0026#34;\u0026#34;\u0026#34; Code to render HTML of home page \u0026#34;\u0026#34;\u0026#34; pass def save(self): \u0026#34;\u0026#34;\u0026#34; Code to save data of home page into a database \u0026#34;\u0026#34;\u0026#34; pass class AdminPage(Renderable, Savable, Deletable): def render(self): \u0026#34;\u0026#34;\u0026#34; Code to render HTML of admin page \u0026#34;\u0026#34;\u0026#34; pass def save(self): \u0026#34;\u0026#34;\u0026#34; Code to save data of admin page into a database \u0026#34;\u0026#34;\u0026#34; pass def delete(self): \u0026#34;\u0026#34;\u0026#34; Code to delete data of admin page from a database \u0026#34;\u0026#34;\u0026#34; pass Data Science Example Let\u0026rsquo;s say that you are a Data Scientist at LinkedIn who is working on a Multimodal project. You are tasked to process Image and Text data. Like the web development example above, you want separate interfaces for each subtask and inherit related interfaces to process images and text accordingly.\nCode Example class DataLoader: def load(self, data): \u0026#34;\u0026#34;\u0026#34; Code to load data to notebook memory (entire dataset or as a generator) \u0026#34;\u0026#34;\u0026#34; pass class DuplicateRemoval: def remove_dup(self, data): \u0026#34;\u0026#34;\u0026#34; Code to remove duplicate images in the dataset \u0026#34;\u0026#34;\u0026#34; pass class DataAugmentation: def img_augment(self, data): \u0026#34;\u0026#34;\u0026#34; Code to augment images in the dataset \u0026#34;\u0026#34;\u0026#34; pass class DataSmoothing: def ts_smooth(self, data): \u0026#34;\u0026#34;\u0026#34; Code to smooth time-series dataset \u0026#34;\u0026#34;\u0026#34; pass class ProcessTimeSeriesDataset(DataLoader, DataSmoothing): def load(self, data): \u0026#34;\u0026#34;\u0026#34; Code to load data to notebook memory (entire dataset or as a generator) \u0026#34;\u0026#34;\u0026#34; pass def ts_smooth(self, data): \u0026#34;\u0026#34;\u0026#34; Code to smooth time-series dataset \u0026#34;\u0026#34;\u0026#34; pass class ProcessImageDataset(DataLoader, DuplicateRemoval, DataAugmentation): def load(self, data): \u0026#34;\u0026#34;\u0026#34; Code to load data to notebook memory (entire dataset or as a generator) \u0026#34;\u0026#34;\u0026#34; pass def remove_dup(self, data): \u0026#34;\u0026#34;\u0026#34; Code to remove duplicate images in the dataset \u0026#34;\u0026#34;\u0026#34; pass def img_augment(self, data): \u0026#34;\u0026#34;\u0026#34; Code to augment images in the dataset \u0026#34;\u0026#34;\u0026#34; pass Here, we have the defined separate interfaces for data load, removing duplicates, image augmentation, and time-series smoothing. The ProcessTimeSeriesDataset and ProcessImageDataset classes only implement (or inherit) the interfaces (or parent classes) that are relevant to them.\nDependency Inversion Principle DIP: \u0026ldquo;Depend on abstractions. Do not depend on concretions\u0026rdquo; — Robert C. Martin. The main idea is to decouple high-level modules from low-level modules by introducing abstractions as mediators. When integrating external dependencies, it is better to create wrapper(s) around them so that your code depends on the wrapper you make and not the details of the dependencies. This allows for better flexibility, as different implementations can be easily substituted without affecting the high-level modules. This principle promotes modularity and maintainability in codebase design.\nFig. 9. Create a wrapper and hide the details. Not everyone need to know all the nitty-gritty of the system (Image source: MonkeyUser.com). Web Development Example Let\u0026rsquo;s say you are a Mobile Developer at Apple who work on the payment integration aspect of Apple Music. Your task is to integrate Stripe Payment API into your backend codebase.\nCode Example class StripeProcessor: def process_payment(self, credit_cart_num): \u0026#34;\u0026#34;\u0026#34; Code to process payment via Stripe Payment API \u0026#34;\u0026#34;\u0026#34; pass class AppleMusic: def notify_payment(self, credit_cart_num): \u0026#34;\u0026#34;\u0026#34; Code to process payment in iOS backend \u0026#34;\u0026#34;\u0026#34; processor = StripeProcessor() processor.process_payment(credit_cart_num) The Apple Music example above violates DIP as the AppleMusic class directly depends on StripeProcessor class, a specific low-level implementation. Imagine that Stripe provides Stripe Payment API version 2.0, which has a massive change in multiple methods. Our AppleMusic (and any other class that uses the StripeProcessor object) will be broken. We will have to fix every single line that uses StripeProcessor\u0026rsquo;s methods.\nFixed: AppleMusic and StripeProcessor classes should depend on abstractions (or a wrapper for StripeProcessor) to avoid such catastrophe. In addition, we can easily swap the external API (says, Venmo Payment API) within the wrapper class by having a wrapper.\nFig. 10. Design refactored with dependency inversion principle. Code Example class PaymentProcessor: def process_payment(self, credit_cart_num): \u0026#34;\u0026#34;\u0026#34; Code to process payment via external API \u0026#34;\u0026#34;\u0026#34; pass class StripeProcessor(PaymentProcessor): def process_payment(self, credit_cart_num): \u0026#34;\u0026#34;\u0026#34; Code to process payment via Stripe Payment API \u0026#34;\u0026#34;\u0026#34; pass class VenmoProcessor(PaymentProcessor): def process_payment(self, credit_cart_num): \u0026#34;\u0026#34;\u0026#34; Code to process payment via Venmo Payment API \u0026#34;\u0026#34;\u0026#34; pass class AppleMusic: def __init__(self, processor: PaymentProcessor): \u0026#34;\u0026#34;\u0026#34; Code to build AppleMusic constructor (object) \u0026#34;\u0026#34;\u0026#34; self.processor = processor def notify_payment(self, credit_cart_num): \u0026#34;\u0026#34;\u0026#34; Code to process payment in iOS backend \u0026#34;\u0026#34;\u0026#34; self.processor.process_payment(credit_cart_num) Data Science Example Let\u0026rsquo;s say you are a Data Analyst at Deloitte who is in charge of plotting the dataset to show insight to stakeholders. Similarly to the Apply Music example above, creating a wrapper for the data visualization task would be best.\nCode Example class Plotter: def show_plots(self, dataset): \u0026#34;\u0026#34;\u0026#34; Code to plot the dataset \u0026#34;\u0026#34;\u0026#34; pass class SeabornPlotter(Plotter): def show_plots(self, dataset): \u0026#34;\u0026#34;\u0026#34; Code to plot the dataset bia Seaborn API \u0026#34;\u0026#34;\u0026#34; pass class PlotlyPlotter(Plotter): def show_plots(self, dataset): \u0026#34;\u0026#34;\u0026#34; Code to plot the dataset bia Plotly API \u0026#34;\u0026#34;\u0026#34; pass class BusinessInsight(): def __init__(self, plotter: Plotter): \u0026#34;\u0026#34;\u0026#34; Code to build BusinessInsight constructor (object) \u0026#34;\u0026#34;\u0026#34; self.plotter = plotter def notify_payment(self, dataset): \u0026#34;\u0026#34;\u0026#34; Code to show the visualization trends or patterns of the dataset \u0026#34;\u0026#34;\u0026#34; self.plotter.show_plots(dataset) Here, the BusinessInsight class depends on the Plotter abstraction through its constructor, allowing different plotting implementations to be injected without modifying the BusinessInsight class. The Plotter class serves as the abstraction, while SeabornPlotter and PlotlyPlotter are concrete implementations of the Plotter class. Depending on the abstraction (Plotter), the BusinessInsight class is decoupled from specific plotting implementations. This promotes flexibility and modularity, as different plotting libraries or variations can be used interchangeably by appropriately implementing the Plotter abstraction to the BusinessInsight class.\nCitation Cited as:\nNguyen, Minh. (May 2023). S.O.L.I.D Principles Explained. https://mnguyen0226.github.io/posts/solid_principles/post/. Or\n@article{nguyen2023solid, title = \u0026#34;S.O.L.I.D Principles Explained.\u0026#34;, author = \u0026#34;Nguyen, Minh\u0026#34;, journal = \u0026#34;mnguyen0226.github.io\u0026#34;, year = \u0026#34;2023\u0026#34;, month = \u0026#34;April\u0026#34;, url = \u0026#34;https://mnguyen0226.github.io/posts/solid_principles/post/\u0026#34; } References [1] R. S. Pressman and B. R. Maxim, Software Engineering: A Practitioner’s Approach. New York, NY: McGraw-Hill Education, 2020.\n[2] R. C. Martin, M. C. Feathers, T. R. Ottinger, and J. J. Langr, Clean Code A Handbook of Agile Software Craftsmanship. Boston, MA: Pearson Education, Inc, 2016.\n[3] R. C. Martin, “Clean Code - Lecture Series,” YouTube, https://www.youtube.com/watch?v=7EmboKQH8lM\u0026amp;amp;list=PLwAjnlpkQEft41G-GvHAKnh_CkaEKFawh\u0026amp;amp;ab_channel=UnityCoin (accessed May 12, 2023).\n[4] “SOLID Design Principle - Web Dev Simplified,” YouTube, https://www.youtube.com/watch?v=UQqY3_6Epbg\u0026amp;amp;list=PLZlA0Gpn_vH9kocFX7R7BAe_CvvOCO_p9\u0026amp;amp;ab_channel=WebDevSimplified (accessed May 12, 2023).\nFig. 11. Ho Chi Minh City, Viet Nam. (Image source: Peter Nguyen @ Unsplash). ","permalink":"https://mnguyen0226.github.io/posts/solid_principles/post/","summary":"Status: [Latest]\nI recently finished an excellent graduate course, Software Engineering (CS5704), and learned about different aspects of software projects and how different-size companies handle their technical/business changes to deliver successful products to their customer. Some important topics are Process Models (Waterfall, V-Model, Spiral, Agile), Requirements Definition, and Architecture Design Patterns. Especially, S.O.L.I.D principles have struck me as must-known concepts for writing better and cleaner code.\nWhy do S.O.L.I.D principles matter?","title":"S.O.L.I.D Principles Explained"},{"content":"👨‍💻 Experience Graduate Research Assistant @ Deloitte Touches x Commonwealth Cyber Initiatives ▪ Tech Stack: Python, Tensorflow, Matplotlib, Pandas, Seaborn. ▪ Date: 05/2022 - 08/2022. ▪ Location: Arlington, Virginia. Responsibilities ▪ Forecasted water levels and localized overflowed water tanks during storms by applying a temporal deep-learning model; reduced 25-30% total operation/maintenance costs and prevented pollution to DC's local rivers. ▪ Built an interactable explainable dashboard using the MDS algorithm for the literature database; provided new insights for stakeholders. ▪ Implemented TimeGAN; synthesized the dataset by 50%, improved prediction accuracy by 4%, and gained more data from stakeholders. Research Assistant @ Terrestrial Robotics Engineering \u0026 Controls Lab (Virginia Tech) ▪ Tech Stack: C#, C++, Unity. \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; ▪ Date: 09/2021 - 05/2022. ▪ Location: Blacksburg, Virginia. Responsibilities ▪ Improved transparency by applying ROS-Bridge data transfer pipeline between the low-level robotic controller and Unity. ▪ Created 3D interactive simulation environments in Unity with VR headsets and Haptix Gloves synchronization. ▪ Poster, Presentation. Machine Learning Intern @ Heron Systems (Shield AI Subsidiary) ▪ Tech Stack: Python, Javascript, PyTorch, Pandas, Plotly, SpaCy, Flask, MySQL. ▪ Date: 05/2021 - 08/2021. ▪ Location: Alexandria, Virginia. Responsibilities ▪ Coded custom neural networks for classifying army-winning probabilities in DARPA's Game Breaker program. ▪ Assured RNN/LSTM/GRU/Transformer-based models' performance before product deployment by developing NLP evaluation tests. ▪ Built a web dashboard showing army composition and deep learning model prediction results; contributed to the company's second round of funding from DARPA by providing demonstrative use cases of the dashboard in the final presentation and report. Research Assistant @ Geo Lab (William \u0026 Mary College) ▪ Tech Stack: Python, Tensorflow, Matplotlib. ▪ Date: 09/2020 - 05/2021. ▪ Location: Williamsburg, Virginia. Responsibilities ▪ Led a team of 5 to develop CNN models for road quality classification via satellite images, combined with AutoEncoder for data-poisoning defense tasks; won 3rd place (out of 8 competing universities) in model performance and contributions. ▪ Contributed 30% of the benchmark dataset by collecting and balancing classes with image augmentation techniques. Research Assistant @ Hybrid Electric Vehicle Team (Virginia Tech) ▪ Tech Stack: C++, MATLAB. \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; ▪ Date: 09/2020 - 05/2021. ▪ Location: Blacksburg, Virginia. Responsibilities ▪ Applied Sensor Fusion algorithm to Chevrolet Blazer 2019 by integrating/testing Borsh radar and Mobileye6 camera sensors. ▪ Implemented and tested the algorithm's performance in simulation; earned full points in the EcoCar Competition's road driving tests. Teaching Assistant @ Integrate System Design (Virginia Tech) ▪ Tech Stack: C++, Circuit Design, Arduino, MIT Mobile App Inventor. ▪ Date: 05/2020 - 05/2021. ▪ Location: Blacksburg, Virginia. Responsibilities ▪ Assisted instructors in grading assignments and mentoring 25 students in the semester-long Smart Home Simulation project. Research Assistant @ Wireless Lab (Virginia Tech) ▪ Tech Stack: C++, Python. ▪ Date: 05/2020 - 08/2020. ▪ Location: Blacksburg, Virginia. Responsibilities ▪ Designed a controller with two stepper motors using Python, Arduino, and GRBL library for long-range signal receiving or signal sweeping tasks. The user can control the Antenna's movements through their preferred angles by entering the angles in the Python scripted interface. 🔧 Skills Languages: Python, SQL, Java, Javascript, HTML, CSS. Web Development Tools: Flask, Vue.js, MySQL, SQLite, Git, Docker, Figma. Data Science Tools: Tensorflow, PyTorch, Scikit-learn, NumPy, Matplotlib, Pandas, Seaborn, Plotly, BeautifulSoup, OpenCV. 🎓 Education Master of Science in Computer Engineering ▪ Concentration: Software \u0026 Machine Intelligence. ▪ GPA: 3.82. ▪ Date: 08/2022 - 05/2024. ▪ Location: Arlington, Virginia. Bachelor of Science in Computer Engineering (Graduated) ▪ Concentration: Machine Learning, Computer Science Minor. ▪ GPA: 3.62. ▪ Date: 08/2018 - 05/2022. ▪ Location: Blacksburg, Virginia. Relevant Courses ▪ Deep Learning ▪ Web Application Development ▪ Software Engineering ▪ Data Visualization ▪ Advanced Machine Learning ▪ Trustworthy Machine Learning ▪ Data Analytics ▪ Computer Vision ▪ Digital Image Processing ▪ AI \u0026 Engineering Applications ▪ Real-time Systems ▪ Data Structure \u0026 Algorithms ▪ Principles Of Computer Architecture 📜 Publication \"DeepH20: Cyber attack detection in water distribution systems using deep learning.\" Nazmul Sikder, Minh T. Nguyen, Donald Elliot, Feras Batarseh. Elsevier's Journal of Water Process Engineering (Vol 52.) (04/2023). Link.\n\"AI for Cyberbiosecurity in Water Systems—A Survey.\" Daniel Sobien, Mehmet O. Yardimci, Minh T. Nguyen, Wan-Yi Mao, Vinita Fordham, Abdul Rahman, Susan Duncan, Feras Batarseh. Springer's Cyberbiosecurity Book (01/2023). Link.\n💻 Projects Books.JBP ▪ Tech Stack: Java, Vue.js, MySQL, Figma. \u0026nbsp; \u0026nbsp; ▪ Developed a single-page full-stack e-commerce web app; followed DAO pattern and SOLID principles. ▪ Github. Flask-Y ▪ Tech Stack: Python, Javascript, MySQL, Flask API, Werkzeug API, CKEditor API, Bootstrap 5. \u0026nbsp; \u0026nbsp; ▪ Redesigned Y Combinator's Hacker News to be more user-friendly (Reddit style). ▪ Developed a multi-page full-stack media web app that allows multiple users to sign-up, login, and manage/comment/vote posts. ▪ Github. Smart Home Simulation ▪ Tech Stack: C++, Circuit Design, Arduino, MIT Mobile App Inventor. \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; ▪ Designed, built, and tested hardware simulation with 8 automated sensors, controlled wirelessly via an Android mobile app. ▪ Appointed to class's teaching assistant by professor due to project's design, presentation, report, and assistance to classmates. ▪ Github. 🏅 Awards Best ML Poster @ FLAIRS-35 ▪ Best journal poster for ML applications in cyberbiosecurity, awarded by juries amongst 40+ submissions. ▪ Link. Turing Research Fellowship @ Commonwealth Cyber Initiatives ▪ Awarded AI Fellowship out of 21 universities in the Commonwealth of Virginia state. ▪ Link. Geo Research Fellowship @ Geo Lab ▪ One of 30 fellows (out of 150 applicants) for the US's largest geospatial data security lab. ▪ Link. 🙌 Volunteers President @ Teaching Robotics \u0026 Engineering Club (Virginia Tech) ▪ Taught C/C++, Arduino, and electric foundations and robotics projects for 15-25 club members. ▪ Supervised club Officers in making teaching materials and mentoring club members. Industry Relations Chair @ IEEE Student Branch (Virginia Tech) ▪ Tripled the number of participants by hosting peer networking events and info sessions to connect students to faculty-sponsored and company-sponsored opportunities in the ECE department. ▪ Collaborated with company representatives in IEEE@VT Summit, resume review sessions, and tech talks. ▪ Raised a $6,000 annual sponsorship from Collins Aerospace, Lockheed Martin, Boeing, and Texas Instruments. Student Mentor @ Center for Enhancement of Engineering Diversity (Virginia Tech) ▪ Served as a sounding board for various issues that confront first-year students during the first 10 weeks. ▪ Held weekly meetings to provide 10 mentees about how to smoothly transition into Virginia Tech culture. Officer @ IEEE Student Branch (Virginia Tech) ▪ Organized “Fun Friday’s” peer networking events and the IEEE Summit industry/leadership conference. Captain @ Math Team (St. Paul Preparatory School) ▪ Won Team Second Place in the 2017 Minnesota High School Mathematics League Tournament. ▪ Assisted the teacher with explaining difficult problems to members. ▪ Assigned math areas to different teammates based on skill sets to boost the team's total score. ","permalink":"https://mnguyen0226.github.io/about/","summary":"👨‍💻 Experience Graduate Research Assistant @ Deloitte Touches x Commonwealth Cyber Initiatives ▪ Tech Stack: Python, Tensorflow, Matplotlib, Pandas, Seaborn. ▪ Date: 05/2022 - 08/2022. ▪ Location: Arlington, Virginia. Responsibilities ▪ Forecasted water levels and localized overflowed water tanks during storms by applying a temporal deep-learning model; reduced 25-30% total operation/maintenance costs and prevented pollution to DC's local rivers. ▪ Built an interactable explainable dashboard using the MDS algorithm for the literature database; provided new insights for stakeholders.","title":"About Me"}]